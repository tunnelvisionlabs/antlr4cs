/*
 * [The "BSD license"]
 *  Copyright (c) 2013 Terence Parr
 *  Copyright (c) 2013 Sam Harwell
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. The name of the author may not be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 *  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// args must be <object-model-object>, <fields-resulting-in-STs>

ParserFile(file, parser, namedActions) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
namespace <file.genPackage> {
<endif>
<namedActions.header>
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

<parser>
<if(file.genPackage)>
} // namespace <file.genPackage>
<endif>
>>

ListenerFile(file, header) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
namespace <file.genPackage> {
<endif>
<header>
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// \<summary>
/// This interface defines a complete listener for a parse tree produced by
/// \<see cref="<csIdentifier.(file.parserName)>"/>.
/// \</summary>
#pragma warning disable 1591
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "<file.ANTLRVersion>")]
[System.CLSCompliant(false)]
public interface I<file.grammarName>Listener : IParseTreeListener {
	<file.listenerNames:{lname |
/// \<summary>
/// Enter a parse tree produced by \<see cref="<csIdentifier.(file.parserName)>.<csIdentifier.(lname)>"/>.
/// \</summary>
/// \<param name="context">The parse tree.\</param>
void Enter<lname; format="cap">([NotNull] <csIdentifier.(file.parserName)>.<lname; format="cap">Context context);
/// \<summary>
/// Exit a parse tree produced by \<see cref="<csIdentifier.(file.parserName)>.<csIdentifier.(lname)>"/>.
/// \</summary>
/// \<param name="context">The parse tree.\</param>
void Exit<lname; format="cap">([NotNull] <csIdentifier.(file.parserName)>.<lname; format="cap">Context context);}; separator="\n">
}
<if(file.genPackage)>
} // namespace <file.genPackage>
<endif>
#pragma warning restore 1591
>>

BaseListenerFile(file, header) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
namespace <file.genPackage> {
<endif>
<header>

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// \<summary>
/// This class provides an empty implementation of \<see cref="I<file.grammarName>Listener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// \</summary>
#pragma warning disable 1591
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "<file.ANTLRVersion>")]
[System.CLSCompliant(false)]
public partial class <file.grammarName>BaseListener : I<file.grammarName>Listener {
	<file.listenerNames:{lname |
/// \<summary>
/// Enter a parse tree produced by \<see cref="<csIdentifier.(file.parserName)>.<csIdentifier.(lname)>"/>.
/// \<para>The default implementation does nothing.\</para>
/// \</summary>
/// \<param name="context">The parse tree.\</param>
public virtual void Enter<lname; format="cap">([NotNull] <csIdentifier.(file.parserName)>.<lname; format="cap">Context context) { \}
/// \<summary>
/// Exit a parse tree produced by \<see cref="<csIdentifier.(file.parserName)>.<csIdentifier.(lname)>"/>.
/// \<para>The default implementation does nothing.\</para>
/// \</summary>
/// \<param name="context">The parse tree.\</param>
public virtual void Exit<lname; format="cap">([NotNull] <csIdentifier.(file.parserName)>.<lname; format="cap">Context context) { \}}; separator="\n">

	/// \<inheritdoc/>
	/// \<remarks>The default implementation does nothing.\</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// \<inheritdoc/>
	/// \<remarks>The default implementation does nothing.\</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// \<inheritdoc/>
	/// \<remarks>The default implementation does nothing.\</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// \<inheritdoc/>
	/// \<remarks>The default implementation does nothing.\</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
<if(file.genPackage)>
} // namespace <file.genPackage>
<endif>
#pragma warning restore 1591
>>

VisitorFile(file, header) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
namespace <file.genPackage> {
<endif>
<header>
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// \<summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by \<see cref="<csIdentifier.(file.parserName)>"/>.
/// \</summary>
/// \<typeparam name="Result">The return type of the visit operation.\</typeparam>
#pragma warning disable 1591
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "<file.ANTLRVersion>")]
[System.CLSCompliant(false)]
public interface I<file.grammarName>Visitor\<Result> : IParseTreeVisitor\<Result> {
	<file.visitorNames:{lname |
/// \<summary>
/// Visit a parse tree produced by \<see cref="<csIdentifier.(file.parserName)>.<csIdentifier.(lname)>"/>.
/// \</summary>
/// \<param name="context">The parse tree.\</param>
/// \<return>The visitor result.\</return>
Result Visit<lname; format="cap">([NotNull] <csIdentifier.(file.parserName)>.<lname; format="cap">Context context);}; separator="\n">
}
<if(file.genPackage)>
} // namespace <file.genPackage>
<endif>
#pragma warning restore 1591
>>

BaseVisitorFile(file, header) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
namespace <file.genPackage> {
<endif>
<header>
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// \<summary>
/// This class provides an empty implementation of \<see cref="I<file.grammarName>Visitor{Result}"/>,
/// which can be extended to create a visitor which only needs to handle a subset
/// of the available methods.
/// \</summary>
/// \<typeparam name="Result">The return type of the visit operation.\</typeparam>
#pragma warning disable 1591
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "<file.ANTLRVersion>")]
[System.CLSCompliant(false)]
public partial class <file.grammarName>BaseVisitor\<Result> : AbstractParseTreeVisitor\<Result>, I<file.grammarName>Visitor\<Result> {
	<file.visitorNames:{lname |
/// \<summary>
/// Visit a parse tree produced by \<see cref="<csIdentifier.(file.parserName)>.<csIdentifier.(lname)>"/>.
/// \<para>
/// The default implementation returns the result of calling \<see cref="AbstractParseTreeVisitor{Result\}.VisitChildren(IRuleNode)"/>
/// on \<paramref name="context"/>.
/// \</para>
/// \</summary>
/// \<param name="context">The parse tree.\</param>
/// \<return>The visitor result.\</return>
public virtual Result Visit<lname; format="cap">([NotNull] <csIdentifier.(file.parserName)>.<lname; format="cap">Context context) { return VisitChildren(context); \}}; separator="\n">
}
<if(file.genPackage)>
} // namespace <file.genPackage>
<endif>
#pragma warning restore 1591
>>

fileHeader(grammarFileName, ANTLRVersion) ::= <<
//------------------------------------------------------------------------------
// \<auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: <ANTLRVersion>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// \</auto-generated>
//------------------------------------------------------------------------------

// Generated from <grammarFileName> by ANTLR <ANTLRVersion>
>>

Parser(parser, funcs, atn, sempredFuncs, superClass) ::= <<
<Parser_(ctor="parser_ctor", ...)>
>>

Parser_(parser, funcs, atn, sempredFuncs, ctor, superClass) ::= <<
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "<file.ANTLRVersion>")]
[System.CLSCompliant(false)]
#pragma warning disable 1591
public <if(parser.abstractRecognizer)>abstract <endif>partial class <csIdentifier.(parser.name)> : <superClass> {
	<if(parser.tokens)>
	public const int
		<parser.tokens:{k | <k>=<parser.tokens.(k)>}; separator=", ", wrap, anchor>;
	<endif>
	public static readonly string[] tokenNames = {
		<parser.tokenNames:{t | <t>}; null="\"\<INVALID>\"", separator=", ", wrap, anchor>
	};
	public const int
		<parser.rules:{r | RULE_<r.name> = <r.index>}; separator=", ", wrap, anchor>;
	public static readonly string[] ruleNames = {
		<parser.ruleNames:{r | "<r>"}; separator=", ", wrap, anchor>
	};

	public override string GrammarFileName { get { return "<parser.grammarFileName>"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	<namedActions.members>
	<parser:(ctor)()>
	<funcs; separator="\n">

<if(sempredFuncs)>
	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		<parser.sempredFuncs.values:{f|
case <f.ruleIndex>: return <f.name>_sempred((<f.ctxType>)_localctx, predIndex);}; separator="\n">
		}
		return true;
	}
	<sempredFuncs.values; separator="\n">
<endif>

	<atn>
}
#pragma warning restore 1591
>>

dumpActions(recog, argFuncs, actionFuncs, sempredFuncs) ::= <<
<if(actionFuncs)>
public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
	switch (ruleIndex) {
	<recog.actionFuncs.values:{f|
case <f.ruleIndex> : <f.name>_action(<if(!recog.modes)>(<f.ctxType>)<endif>_localctx, actionIndex); break;}; separator="\n">
	}
}
<actionFuncs.values; separator="\n">
<endif>
<if(sempredFuncs)>
public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
	switch (ruleIndex) {
	<recog.sempredFuncs.values:{f|
case <f.ruleIndex> : return <f.name>_sempred(<if(!recog.modes)>(<f.ctxType>)<endif>_localctx, predIndex);}; separator="\n">
	}
	return true;
}
<sempredFuncs.values; separator="\n">
<endif>
>>

parser_ctor(parser) ::= <<
<if(parser.abstractRecognizer)>protected<else>public<endif> <csIdentifier.(parser.name)>(ITokenStream input)
	: base(input)
{
	_interp = new ParserATNSimulator(this,_ATN);
}
>>

/* This generates a private method since the actionIndex is generated, making an
 * overriding implementation impossible to maintain.
 */
RuleActionFunction(r, actions) ::= <<
private void <r.name>_action(<r.ctxType> _localctx, int actionIndex) {
	switch (actionIndex) {
	<actions:{index|
case <index>: <actions.(index)> break;}; separator="\n">
	}
}
>>

/* This generates a private method since the predIndex is generated, making an
 * overriding implementation impossible to maintain.
 */
RuleSempredFunction(r, actions) ::= <<
private bool <r.name>_sempred(<r.ctxType> _localctx, int predIndex) {
	switch (predIndex) {
	<actions:{index|
case <index>: return <actions.(index)>;}; separator="\n">
	}
	return true;
}
>>

RuleFunction(currentRule,code,locals,ruleCtx,altLabelCtxs,namedActions,finallyAction,postamble,exceptions) ::= <<

<ruleCtx>
<altLabelCtxs:{l | <altLabelCtxs.(l)>}; separator="\n">

[RuleVersion(<namedActions.version; null="0">)]
<if(currentRule.modifiers)><currentRule.modifiers:{f | <f> }><else>public <endif><currentRule.ctxType> <csIdentifier.(currentRule.name)>(<currentRule.args:{a | <a.type> <csIdentifier.(a.name)><if(a.initValue)> = <a.initValue><endif>}; separator=", ">) {
	<currentRule.ctxType> _localctx = new <currentRule.ctxType>(_ctx, State<currentRule.args:{a | , <csIdentifier.(a.name)>}>);
	EnterRule(_localctx, <currentRule.startState>, RULE_<currentRule.name>);
	<namedActions.init>
	<locals; separator="\n">
	try {
<if(currentRule.hasLookaheadBlock)>
		int _alt;
<endif>
		<code>
		<postamble; separator="\n">
		<namedActions.after>
	}
	<if(exceptions)>
	<exceptions; separator="\n">
	<else>
	catch (RecognitionException re) {
		_localctx.exception = re;
		_errHandler.ReportError(this, re);
		_errHandler.Recover(this, re);
	}
	<endif>
	finally {
		<finallyAction>
		ExitRule();
	}
	return _localctx;
}
>>

LeftFactoredRuleFunction(currentRule,code,locals,namedActions,finallyAction,postamble) ::=
<<

<if(currentRule.modifiers)><currentRule.modifiers:{f | <f> }><else>private <endif><currentRule.ctxType> <csIdentifier.(currentRule.name)>(<currentRule.args:{a | <a.type> <csIdentifier.(a.name)><if(a.initValue)> = <a.initValue><endif>}; separator=", ">) {
	<currentRule.ctxType> _localctx = new <currentRule.ctxType>(_ctx, State<currentRule.args:{a | , <csIdentifier.(a.name)>}>);
	EnterLeftFactoredRule(_localctx, <currentRule.startState>, RULE_<currentRule.variantOf>);
	<namedActions.init>
	<locals; separator="\n">
	try {
<if(currentRule.hasLookaheadBlock)>
		int _alt;
<endif>
		<code>
		<postamble; separator="\n">
		<namedActions.after>
	}
	catch (RecognitionException re) {
		_localctx.exception = re;
		_errHandler.ReportError(this, re);
		_errHandler.Recover(this, re);
	}
	finally {
		<finallyAction>
		ExitRule();
	}
	return _localctx;
}
>>

// This behaves similar to RuleFunction (enterRule is called, and no adjustments
// are made to the parse tree), but since it's still a variant no context class
// needs to be generated.
LeftUnfactoredRuleFunction(currentRule,code,locals,namedActions,finallyAction,postamble) ::=
<<

<if(currentRule.modifiers)><currentRule.modifiers:{f | <f> }><else>private <endif><currentRule.ctxType> <csIdentifier.(currentRule.name)>(<currentRule.args:{a | <a.type> <csIdentifier.(a.name)><if(a.initValue)> = <a.initValue><endif>}; separator=", ">) {
	<currentRule.ctxType> _localctx = new <currentRule.ctxType>(_ctx, State<currentRule.args:{a | , <csIdentifier.(a.name)>}>);
	EnterRule(_localctx, <currentRule.startState>, RULE_<currentRule.variantOf>);
	<namedActions.init>
	<locals; separator="\n">
	try {
<if(currentRule.hasLookaheadBlock)>
		int _alt;
<endif>
		<code>
		<postamble; separator="\n">
		<namedActions.after>
	}
	catch (RecognitionException re) {
		_localctx.exception = re;
		_errHandler.ReportError(this, re);
		_errHandler.Recover(this, re);
	}
	finally {
		<finallyAction>
		ExitRule();
	}
	return _localctx;
}
>>

LeftRecursiveRuleFunction(currentRule,code,locals,ruleCtx,altLabelCtxs,
	namedActions,finallyAction,postamble) ::=
<<

<ruleCtx>
<altLabelCtxs:{l | <altLabelCtxs.(l)>}; separator="\n">

[RuleVersion(<namedActions.version; null="0">)]
<if(currentRule.modifiers)><currentRule.modifiers:{f | <f> }><else>public <endif><currentRule.ctxType> <csIdentifier.(currentRule.name)>(int _p<currentRule.args:{a | , <a.type> <csIdentifier.(a.name)><if(a.initValue)> = <a.initValue><endif>}>) {
	ParserRuleContext _parentctx = _ctx;
	int _parentState = State;
	<currentRule.ctxType> _localctx = new <currentRule.ctxType>(_ctx, _parentState<currentRule.args:{a | , <csIdentifier.(a.name)>}>);
	<currentRule.ctxType> _prevctx = _localctx;
	int _startState = <currentRule.startState>;
	EnterRecursionRule(_localctx, RULE_<currentRule.name>, _p);
	<namedActions.init>
	<locals; separator="\n">
	try {
<if(currentRule.hasLookaheadBlock)>
		int _alt;
<endif>
		<code>
		<postamble; separator="\n">
		<namedActions.after>
	}
	catch (RecognitionException re) {
		_localctx.exception = re;
		_errHandler.ReportError(this, re);
		_errHandler.Recover(this, re);
	}
	finally {
		<finallyAction>
		UnrollRecursionContexts(_parentctx);
	}
	return _localctx;
}
>>

CodeBlockForOuterMostAlt(currentOuterMostAltCodeBlock, locals, preamble, ops) ::= <<
<if(currentOuterMostAltCodeBlock.altLabel)>_localctx = new <currentOuterMostAltCodeBlock.altLabel; format="cap">Context(_localctx);<endif>
EnterOuterAlt(_localctx, <currentOuterMostAltCodeBlock.alt.altNum>);
<CodeBlockForAlt(currentAltCodeBlock=currentOuterMostAltCodeBlock, ...)>
>>

CodeBlockForAlt(currentAltCodeBlock, locals, preamble, ops) ::= <<
{
<locals; separator="\n">
<preamble; separator="\n">
<ops; separator="\n">
}
>>

LL1AltBlock(choice, preamble, alts, error) ::= <<
State = <choice.stateNumber>;
<!_errHandler.sync(this);!>
<if(choice.label)><labelref(choice.label)> = _input.Lt(1);<endif>
<preamble; separator="\n">
switch (_input.La(1)) {
<choice.altLook,alts:{look,alt| <cases(ttypes=look)>
	<alt>
	break;}; separator="\n">
default:
	<error>
}
>>

LL1OptionalBlock(choice, alts, error) ::= <<
State = <choice.stateNumber>;
<!_errHandler.sync(this);!>
switch (_input.La(1)) {
<choice.altLook,alts:{look,alt| <cases(ttypes=look)>
	<alt>
	break;}; separator="\n">
default:
	<error>
}
>>

LL1OptionalBlockSingleAlt(choice, expr, alts, preamble, error, followExpr) ::= <<
State = <choice.stateNumber>;
<!_errHandler.sync(this);!>
<preamble; separator="\n">
if (<expr>) {
	<alts; separator="\n">
}
<!else if ( !(<followExpr>) ) <error>!>
>>

LL1StarBlock(choice, alts) ::= <<
State = <choice.stateNumber>;
_errHandler.Sync(this);
<choice.loopLabel>:
while (true) {
	switch (_input.La(1)) {
	<choice.altLook,alts:{look,alt| <cases(look)>
	<alt>
	break;}; separator="\n">
	<cases(choice.exitLook)>
		break <choice.loopLabel>;
	}
	State = <choice.loopBackStateNumber>;
	_errHandler.Sync(this);
}
>>

LL1StarBlockSingleAlt(choice, loopExpr, alts, preamble, iteration) ::= <<
State = <choice.stateNumber>;
_errHandler.Sync(this);
<preamble; separator="\n">
while (<loopExpr>) {
	<alts; separator="\n">
	State = <choice.loopBackStateNumber>;
	_errHandler.Sync(this);
	<iteration>
}
>>

LL1PlusBlock(choice, alts, iteration, loopExpr, error) ::= <<
State = <choice.blockStartStateNumber>;<! alt block decision !>
_errHandler.Sync(this);
do {
	switch (_input.La(1)) {
	<choice.altLook,alts:{look,alt| <cases(look)>
	<alt>
	break;}; separator="\n">
	default:
		<error>
	}
	State = <choice.stateNumber>;
	_errHandler.Sync(this);
	<iteration>
} while ( <loopExpr> );
>>

LL1PlusBlockSingleAlt(choice, loopExpr, alts, preamble, iteration) ::= <<
State = <choice.blockStartStateNumber>;<! alt block decision !>
_errHandler.Sync(this);
<preamble; separator="\n">
do {
	<alts; separator="\n">
	State = <choice.stateNumber>;<! loopback/exit decision !>
	_errHandler.Sync(this);
	<iteration>
} while ( <loopExpr> );
>>

// LL(*) stuff

AltBlock(choice, preamble, alts, error) ::= <<
State = <choice.stateNumber>;
<!_errHandler.sync(this);!>
<if(choice.label)><labelref(choice.label)> = _input.Lt(1);<endif>
<preamble; separator="\n">
switch ( Interpreter.AdaptivePredict(_input,<choice.decision>,_ctx) ) {
<alts:{alt |
case <i>:
	<alt>
	break;}; separator="\n">
}
>>

OptionalBlock(choice, alts, error) ::= <<
State = <choice.stateNumber>;
<!_errHandler.sync(this);!>
switch ( Interpreter.AdaptivePredict(_input,<choice.decision>,_ctx) ) {
<alts:{alt |
case <i><if(!choice.ast.greedy)>+1<endif>:
	<alt>
	break;}; separator="\n">
}
>>

StarBlock(choice, alts, sync, iteration) ::= <<
State = <choice.stateNumber>;
_errHandler.Sync(this);
_alt = Interpreter.AdaptivePredict(_input,<choice.decision>,_ctx);
while ( _alt!=<choice.exitAlt> && _alt!=-1 ) {
	if ( _alt==1<if(!choice.ast.greedy)>+1<endif> ) {
		<iteration>
		<alts> <! should only be one !>
	}
	State = <choice.loopBackStateNumber>;
	_errHandler.Sync(this);
	_alt = Interpreter.AdaptivePredict(_input,<choice.decision>,_ctx);
}
>>

PlusBlock(choice, alts, error) ::= <<
State = <choice.blockStartStateNumber>;<! alt block decision !>
_errHandler.Sync(this);
_alt = Interpreter.AdaptivePredict(_input,<choice.decision>,_ctx);
do {
	switch (_alt) {
	<alts:{alt|
case <i><if(!choice.ast.greedy)>+1<endif>:
	<alt>
	break;}; separator="\n">
	default:
		<error>
	}
	State = <choice.loopBackStateNumber>;<! loopback/exit decision !>
	_errHandler.Sync(this);
	_alt = Interpreter.AdaptivePredict(_input,<choice.decision>,_ctx);
} while ( _alt!=<choice.exitAlt> && _alt!=-1 );
>>

Sync(s) ::= "Sync(<s.expecting.name>);"

ThrowNoViableAlt(t) ::= "throw new NoViableAltException(this);"

TestSetInline(s) ::= <<
<s.bitsets:{bits | <if(rest(rest(bits.ttypes)))><bitsetBitfieldComparison(s, bits)><else><bitsetInlineComparison(s, bits)><endif>}; separator=" || ">
>>

// Java language spec 15.19 - shift operators mask operands rather than overflow to 0... need range test
testShiftInRange(shiftAmount) ::= <<
((<shiftAmount>) & ~0x3f) == 0
>>

// produces smaller bytecode only when bits.ttypes contains more than two items
bitsetBitfieldComparison(s, bits) ::= <%
(<testShiftInRange({<offsetShift(s.varName, bits.shift)>})> && ((1L \<\< <offsetShift(s.varName, bits.shift)>) & (<bits.ttypes:{ttype | (1L \<\< <offsetShift(ttype, bits.shift)>)}; separator=" | ">)) != 0)
%>

isZero ::= [
"0":true,
default:false
]

offsetShift(shiftAmount, offset) ::= <%
<if(!isZero.(offset))>(<shiftAmount> - <offset>)<else><shiftAmount><endif>
%>

// produces more efficient bytecode when bits.ttypes contains at most two items
bitsetInlineComparison(s, bits) ::= <%
<bits.ttypes:{ttype | <s.varName>==<ttype>}; separator=" || ">
%>

cases(ttypes) ::= <<
<ttypes:{t | case <t>:}; separator="\n">
>>

InvokeRule(r, argExprsChunks) ::= <<
State = <r.stateNumber>; <if(r.labels)><r.labels:{l | <labelref(l)> = }><endif><csIdentifier.(r.name)>(<if(r.ast.options.p)><r.ast.options.p><if(argExprsChunks)>,<endif><endif><argExprsChunks>);
>>

MatchToken(m) ::= <<
State = <m.stateNumber>; <if(m.labels)><m.labels:{l | <labelref(l)> = }><endif>Match(<m.name>);
>>

MatchSet(m, expr, capture) ::= "<CommonSetStuff(m, expr, capture, false)>"

MatchNotSet(m, expr, capture) ::= "<CommonSetStuff(m, expr, capture, true)>"

CommonSetStuff(m, expr, capture, invert) ::= <<
State = <m.stateNumber>;
<if(m.labels)><m.labels:{l | <labelref(l)> = }>_input.Lt(1);<endif>
<capture>
if ( <if(invert)><m.varName> \<= 0 || <else>!<endif>(<expr>) ) {
	<if(m.labels)><m.labels:{l | <labelref(l)> = }><endif>_errHandler.RecoverInline(this);
}
Consume();
>>

Wildcard(w) ::= <<
State = <w.stateNumber>;
<if(w.labels)><w.labels:{l | <labelref(l)> = }><endif>MatchWildcard();
>>

// ACTION STUFF

Action(a, foo, chunks) ::= "<chunks>"

ArgAction(a, chunks) ::= "<chunks>"

SemPred(p, chunks, failChunks) ::= <<
State = <p.stateNumber>;
if (!(<chunks>)) throw new FailedPredicateException(this, <p.predicate><if(failChunks)>, <failChunks><elseif(p.msg)>, <p.msg><endif>);
>>

ExceptionClause(e, catchArg, catchAction) ::= <<
catch (<catchArg>) {
	<catchAction>
}
>>

// lexer actions are not associated with model objects

LexerSkipCommand()  ::= "Skip();"
LexerMoreCommand()  ::= "More();"
LexerPopModeCommand() ::= "PopMode();"

LexerTypeCommand(arg)      ::= "_type = <arg>;"
LexerChannelCommand(arg)   ::= "_channel = <arg>_CHANNEL;"
LexerModeCommand(arg)      ::= "_mode = <arg>;"
LexerPushModeCommand(arg)  ::= "PushMode(<arg>);"

DefaultParserSuperClass(s) ::= "Parser"
DefaultLexerSuperClass(s)  ::= "Lexer"

ActionText(t) ::= "<t.text>"
ActionTemplate(t) ::= "<t.st>"
ArgRef(a) ::= "_localctx.<csIdentifier.(a.name)>"
LocalRef(a) ::= "_localctx.<csIdentifier.(a.name)>"
RetValueRef(a) ::= "_localctx.<csIdentifier.(a.name)>"
QRetValueRef(a) ::= "<ctx(a)>.<a.dict>.<csIdentifier.(a.name)>"
/** How to translate $tokenLabel */
TokenRef(t) ::= "<ctx(t)>.<csIdentifier.(t.name)>"
LabelRef(t) ::= "<ctx(t)>.<csIdentifier.(t.name)>"
ListLabelRef(t) ::= "<ctx(t)>.<ListLabelName(csIdentifier.(t.name))>"
SetAttr(s,rhsChunks) ::= "<ctx(s)>.<csIdentifier.(s.name)> = <rhsChunks>;"

TokenLabelType() ::= "<file.TokenLabelType; null={IToken}>"
InputSymbolType() ::= "<file.InputSymbolType; null={IToken}>"

TokenPropertyRef_text(t) ::= "(<ctx(t)>.<t.label>!=null?<ctx(t)>.<t.label>.Text:null)"
TokenPropertyRef_type(t) ::= "(<ctx(t)>.<t.label>!=null?<ctx(t)>.<t.label>.Type:0)"
TokenPropertyRef_line(t) ::= "(<ctx(t)>.<t.label>!=null?<ctx(t)>.<t.label>.Line:0)"
TokenPropertyRef_pos(t) ::= "(<ctx(t)>.<t.label>!=null?<ctx(t)>.<t.label>.CharPositionInLine:0)"
TokenPropertyRef_channel(t) ::= "(<ctx(t)>.<t.label>!=null?<ctx(t)>.<t.label>.Channel:0)"
TokenPropertyRef_index(t) ::= "(<ctx(t)>.<t.label>!=null?<ctx(t)>.<t.label>.TokenIndex:0)"
TokenPropertyRef_int(t) ::= "(<ctx(t)>.<t.label>!=null?int.Parse(<ctx(t)>.<t.label>.Text):0)"

RulePropertyRef_start(r) ::= "(<ctx(r)>.<r.label>!=null?(<ctx(r)>.<r.label>.start):null)"
RulePropertyRef_stop(r)	 ::= "(<ctx(r)>.<r.label>!=null?(<ctx(r)>.<r.label>.stop):null)"
RulePropertyRef_text(r)	 ::= "(<ctx(r)>.<r.label>!=null?_input.GetText(<ctx(r)>.<r.label>.start,<ctx(r)>.<r.label>.stop):null)"
RulePropertyRef_ctx(r)	 ::= "<ctx(r)>.<r.label>"

ThisRulePropertyRef_start(r) ::= "_localctx.start"
ThisRulePropertyRef_stop(r)	 ::= "_localctx.stop"
ThisRulePropertyRef_text(r)	 ::= "_input.GetText(_localctx.start, _input.Lt(-1))"
ThisRulePropertyRef_ctx(r)	 ::= "_localctx"

NonLocalAttrRef(s)		 ::= <%((<s.ruleName; format="cap">Context)GetInvokingContext(<s.ruleIndex>)).<csIdentifier.(s.name)>%>
SetNonLocalAttr(s, rhsChunks)	  ::=
	<%((<s.ruleName; format="cap">Context)GetInvokingContext(<s.ruleIndex>)).<csIdentifier.(s.name)> = <rhsChunks>;%>

AddToLabelList(a) ::= "<ctx(a.label)>.<a.listName>.Add(<labelref(a.label)>);"

TokenDecl(t) ::= "public <TokenLabelType()> <csIdentifier.(t.name)>;"
TokenTypeDecl(t) ::= "int <csIdentifier.(t.name)>;"
TokenListDecl(t) ::= "public IList\<IToken> <csIdentifier.(t.name)> = new List\<IToken>();"
RuleContextDecl(r) ::= "public <r.ctxName> <csIdentifier.(r.name)>;"
RuleContextListDecl(rdecl) ::= "public IList\<<rdecl.ctxName>> <csIdentifier.(rdecl.name)> = new List\<<rdecl.ctxName>>();"

contextGetterCollection(elementType) ::= <%
<elementType>[]
%>

ContextTokenGetterDecl(t)      ::=
    "public ITerminalNode <csIdentifier.(t.name)>() { return GetToken(<csIdentifier.(parser.name)>.<csIdentifier.(t.name)>, 0); }"
ContextTokenListGetterDecl(t)  ::= <<
public <contextGetterCollection("ITerminalNode")> <csIdentifier.(t.name)>() { return GetTokens(<csIdentifier.(parser.name)>.<csIdentifier.(t.name)>); }
>>
ContextTokenListIndexedGetterDecl(t)  ::= <<
public ITerminalNode <csIdentifier.(t.name)>(int i) {
	return GetToken(<csIdentifier.(parser.name)>.<csIdentifier.(t.name)>, i);
}
>>
ContextRuleGetterDecl(r)       ::= <<
public <r.ctxName> <csIdentifier.(r.name)>() {
	return GetRuleContext\<<r.ctxName>\>(0);
}
>>
ContextRuleListGetterDecl(r)   ::= <<
public <contextGetterCollection({<r.ctxName>})> <csIdentifier.(r.name)>() {
	return GetRuleContexts\<<r.ctxName>\>();
}
>>
ContextRuleListIndexedGetterDecl(r)   ::= <<
public <r.ctxName> <csIdentifier.(r.name)>(int i) {
	return GetRuleContext\<<r.ctxName>\>(i);
}
>>

LexerRuleContext() ::= "RuleContext"

/** The rule context name is the rule followed by a suffix; e.g.,
 *	r becomes rContext.
 */
RuleContextNameSuffix() ::= "Context"

ImplicitTokenLabel(tokenName) ::= "_<tokenName>"
ImplicitRuleLabel(ruleName)	  ::= "_<ruleName>"
ImplicitSetLabel(id)		  ::= "_tset<id>"
ListLabelName(label)		  ::= "_<label>"

CaptureNextToken(d) ::= "<d.varName> = _input.Lt(1);"
CaptureNextTokenType(d) ::= "<d.varName> = _input.La(1);"

StructDecl(struct,attrs,getters,dispatchMethods,interfaces,extensionMembers,
           superClass={ParserRuleContext}) ::= <<
public partial class <struct.name> : <superClass><if(interfaces)>, <interfaces; separator=", "><endif> {
	<attrs:{a | <a>}; separator="\n">
	<getters:{g | <g>}; separator="\n">
	<if(struct.ctorAttrs)>public <struct.name>(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }<endif>
	public <struct.name>(ParserRuleContext parent, int invokingState<struct.ctorAttrs:{a | , <a.type> <csIdentifier.(a.name)>}>)
		: base(parent, invokingState)
	{
		<struct.ctorAttrs:{a | this.<csIdentifier.(a.name)> = <csIdentifier.(a.name)>;}; separator="\n">
	}
	public override int GetRuleIndex() { return RULE_<struct.derivedFromName>; }
<if(struct.provideCopyFrom)> <! don't need copy unless we have subclasses !>
	public <struct.name>() { }
	public virtual void CopyFrom(<struct.name> context) {
		base.CopyFrom(context);
		<struct.attrs:{a | this.<csIdentifier.(a.name)> = context.<csIdentifier.(a.name)>;}; separator="\n">
	}
<endif>
	<dispatchMethods; separator="\n">
	<extensionMembers; separator="\n">
}
>>

AltLabelStructDecl(struct,attrs,getters,dispatchMethods) ::= <<
public partial class <struct.name> : <currentRule.name; format="cap">Context {
	<attrs:{a | <a>}; separator="\n">
	<getters:{g | <g>}; separator="\n">
	public <struct.name>(<currentRule.name; format="cap">Context context) { CopyFrom(context); }
	<dispatchMethods; separator="\n">
}
>>

ListenerDispatchMethod(method) ::= <<
public override void <if(method.isEnter)>Enter<else>Exit<endif>Rule(IParseTreeListener listener) {
	I<parser.grammarName>Listener typedListener = listener as I<parser.grammarName>Listener;
	if (typedListener != null) typedListener.<if(method.isEnter)>Enter<else>Exit<endif><struct.derivedFromName; format="cap">(this);
}
>>

VisitorDispatchMethod(method) ::= <<
public override TResult Accept\<TResult>(IParseTreeVisitor\<TResult> visitor) {
	I<parser.grammarName>Visitor\<TResult> typedVisitor = visitor as I<parser.grammarName>Visitor\<TResult>;
	if (typedVisitor != null) return typedVisitor.Visit<struct.derivedFromName; format="cap">(this);
	else return visitor.VisitChildren(this);
}
>>

AttributeDecl(d) ::= "public <d.decl>;"

/** If we don't know location of label def x, use this template */
labelref(x) ::= "<if(!x.isLocal)><typedContext(x.ctx)>.<endif><csIdentifier.(x.name)>"

/** For any action chunk, what is correctly-typed context struct ptr? */
ctx(actionChunk) ::= "<typedContext(actionChunk.ctx)>"

// only casts _localctx to the type when the cast isn't redundant (i.e. to a sub-context for a labeled alt)
typedContext(ctx) ::= "<if(ctx.provideCopyFrom)>((<ctx.name>)_localctx)<else>_localctx<endif>"

// used for left-recursive rules
recRuleAltPredicate(ruleName,opPrec)  ::= "Precpred(_ctx, <opPrec>)"
recRuleSetReturnAction(src,name)	  ::= "$<name>=$<src>.<name>;"
recRuleSetStopToken()                 ::= "_ctx.stop = _input.Lt(-1);"

recRuleAltStartAction(ruleName, ctxName, label) ::= <<
_localctx = new <ctxName>Context(_parentctx, _parentState);
<if(label)>_localctx.<label> = _prevctx;<endif>
PushNewRecursionContext(_localctx, _startState, RULE_<ruleName>);
>>

recRuleLabeledAltStartAction(ruleName, currentAltLabel, label) ::= <<
_localctx = new <currentAltLabel; format="cap">Context(new <ruleName; format="cap">Context(_parentctx, _parentState));
<if(label)>((<currentAltLabel; format="cap">Context)_localctx).<label> = _prevctx;<endif>
PushNewRecursionContext(_localctx, _startState, RULE_<ruleName>);
>>

recRuleReplaceContext(ctxName) ::= <<
_localctx = new <ctxName>Context(_localctx);
_ctx = _localctx;
_prevctx = _localctx;
>>

recRuleSetPrevCtx() ::= <<
if ( _parseListeners!=null ) TriggerExitRuleEvent();
_prevctx = _localctx;
>>


LexerFile(file, lexer, namedActions) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
namespace <file.genPackage> {
<endif>
<namedActions.header>
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

<lexer>
<if(file.genPackage)>
} // namespace <file.genPackage>
<endif>
>>

Lexer(lexer, atn, actionFuncs, sempredFuncs, superClass) ::= <<
#pragma warning disable 1591
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "<file.ANTLRVersion>")]
[System.CLSCompliant(false)]
public <if(lexer.abstractRecognizer)>abstract <endif>partial class <csIdentifier.(lexer.name)> : <superClass> {
  public const int HIDDEN_CHANNEL = 1, DEFAULT_CHANNEL = 0;
	public const int
		<lexer.tokens:{k | <k>=<lexer.tokens.(k)>}; separator=", ", wrap, anchor>;
	<rest(lexer.modes):{m| public const int <m> = <i>;}; separator="\n">
	public static string[] modeNames = {
		<lexer.modes:{m| "<m>"}; separator=", ", wrap, anchor>
	};

	public static readonly string[] tokenNames = {
		"\<INVALID>",
		<lexer.tokenNames:{t | <t>}; separator=", ", wrap, anchor>
	};
	public static readonly string[] ruleNames = {
		<lexer.ruleNames:{r | "<r>"}; separator=", ", wrap, anchor>
	};

	<namedActions.members>

	<if(lexer.abstractRecognizer)>protected<else>public<endif> <csIdentifier.(lexer.name)>(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	public override string GrammarFileName { get { return "<lexer.grammarFileName>"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	<dumpActions(lexer, "", actionFuncs, sempredFuncs)>
	<atn>
}
#pragma warning restore 1591
>>


SerializedATN(model) ::= <<
public static readonly string _serializedATN =
	"<model.serialized; wrap={"+<\n><\t>"}>";
public static readonly ATN _ATN =
	ATNSimulator.Deserialize(_serializedATN.ToCharArray());
>>

initValue(typeName) ::= <<
default(<typeName>)
>>

codeFileExtension() ::= ".cs"

csIdentifier ::= [
	"abstract" : "@abstract",
	"as" : "@as",
	"base" : "@base",
	"bool" : "@bool",
	"break" : "@break",
	"byte" : "@byte",
	"case" : "@case",
	"catch" : "@catch",
	"char" : "@char",
	"checked" : "@checked",
	"class" : "@class",
	"const" : "@const",
	"continue" : "@continue",
	"decimal" : "@decimal",
	"default" : "@default",
	"delegate" : "@delegate",
	"do" : "@do",
	"double" : "@double",
	"else" : "@else",
	"enum" : "@enum",
	"event" : "@event",
	"explicit" : "@explicit",
	"extern" : "@extern",
	"false" : "@false",
	"finally" : "@finally",
	"fixed" : "@fixed",
	"float" : "@float",
	"for" : "@for",
	"foreach" : "@foreach",
	"goto" : "@goto",
	"if" : "@if",
	"implicit" : "@implicit",
	"in" : "@in",
	"int" : "@int",
	"interface" : "@interface",
	"internal" : "@internal",
	"is" : "@is",
	"lock" : "@lock",
	"long" : "@long",
	"namespace" : "@namespace",
	"new" : "@new",
	"null" : "@null",
	"object" : "@object",
	"operator" : "@operator",
	"out" : "@out",
	"override" : "@override",
	"params" : "@params",
	"private" : "@private",
	"protected" : "@protected",
	"public" : "@public",
	"readonly" : "@readonly",
	"ref" : "@ref",
	"return" : "@return",
	"sbyte" : "@sbyte",
	"sealed" : "@sealed",
	"short" : "@short",
	"sizeof" : "@sizeof",
	"stackalloc" : "@stackalloc",
	"static" : "@static",
	"string" : "@string",
	"struct" : "@struct",
	"switch" : "@switch",
	"this" : "@this",
	"throw" : "@throw",
	"true" : "@true",
	"try" : "@try",
	"typeof" : "@typeof",
	"uint" : "@uint",
	"ulong" : "@ulong",
	"unchecked" : "@unchecked",
	"unsafe" : "@unsafe",
	"ushort" : "@ushort",
	"using" : "@using",
	"virtual" : "@virtual",
	"void" : "@void",
	"volatile" : "@volatile",
	"while" : "@while",
	default : key
]
